"use client";
import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import {
    ChevronRight,
    CircleUser,
    CircleUserRoundIcon,
    ClipboardPlus,
    GraduationCap,
    Info,
    LocateFixed,
    Shield,
    Users,
} from "lucide-react";
import { IconProps, StepProps, StepperProps } from "@/types";
import BasicInfo from "@/components/StudentRegistration/BasicInfo";
import AddressInfo from "@/components/StudentRegistration/AddressInfo";
import FatherInfo from "@/components/StudentRegistration/FatherInfo";
import MotherInfo from "@/components/StudentRegistration/MotherInfo";
import GuardianInfo from "@/components/StudentRegistration/GuardianInfo";
import AcademicInfo from "@/components/StudentRegistration/AcademicInfo";
import MedicalInfo from "@/components/StudentRegistration/MedicalInfo";
import { useDispatch, useSelector } from "react-redux";
import {
    setAcademicInfoData,
    setAddressInfoData,
    setBasicInfoData,
    setFatherInfoData,
    setGuardianInfoData,
    setMedicalInfoData,
    setMotherInfoDate,
    resetRegistrationData, // Add this action to reset the data
} from "@/context/studentRegistrationSlice";
import { RootState } from "@/context/store";
import { useRouter } from "next/navigation";

export default function Page() {
    const router = useRouter();
    const [step, setStep] = useState<number>(1);
    const [loading, setLoading] = useState<boolean>(false);
    const dispatch = useDispatch();
    const registrationData = useSelector(
        (state: RootState) => state.studentRegistration
    );

    // Reset the state when the component unmounts
    useEffect(() => {
        return () => {
            dispatch(resetRegistrationData());
        };
    }, [dispatch]);

    const handleNext = async (data: any) => {
        if (step === 1) {
            dispatch(setBasicInfoData(data));
        } else if (step === 2) {
            dispatch(setAddressInfoData(data));
        } else if (step === 3) {
            dispatch(setFatherInfoData(data));
        } else if (step === 4) {
            dispatch(setMotherInfoDate(data));
        } else if (step === 5) {
            dispatch(setGuardianInfoData(data));
        } else if (step === 6) {
            dispatch(setAcademicInfoData(data));
        } else if(step === 7){
            dispatch(setMedicalInfoData(data));

            // Show loader
            setLoading(true);

            // Make API call to save data
            try {
                const response = await fetch('/api/saveRegistration', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(registrationData),
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                // Handle successful response
                const result = await response.json();
                console.log('Data saved successfully:', result);

                // Reset Redux state
                dispatch(resetRegistrationData());

                // Navigate after the last step
                router.push('/studentRegistration');
            } catch (error) {
                console.error('Failed to save data:', error);
                // Handle error (e.g., show error message to user)
            } finally {
                // Hide loader
                setLoading(false);
            }

            return; // Return early to avoid increasing the step count
        }

        console.log(registrationData);
        setStep(step + 1);
    };

    return (
        <div className='flex min-h-screen items-start justify-center bg-gradient-to-br 2xl:pt-40 xl:pt-20 relative '>
            <div className='flex font-semibold items-center text-blue-500 absolute 2xl:top-24 xl:top-6 gap-3'>
                <Users
                    size={35}
                    strokeWidth='3'
                />
                <h1 className='text-4xl'>Student Registration</h1>
            </div>
            <div className='mx-auto w-full max-w-7xl rounded-2xl bg-white shadow-custom-dark 2xl:mt-12 xl:mt-6'>
                <div className='flex justify-between rounded py-8 px-10 flex-wrap'>
                    <Stepper step={step} />
                </div>
                <div className='px-10 pb-8 '>
                    {loading ? (
                        <div className='flex justify-center items-center'>
                            <div className='loader'></div> {/* Add a loader component */}
                        </div>
                    ) : (
                        <>
                            {step === 1 && <BasicInfo onNext={handleNext} />}
                            {step === 2 && <AddressInfo onNext={handleNext} />}
                            {step === 3 && <FatherInfo onNext={handleNext} />}
                            {step === 4 && <MotherInfo onNext={handleNext} />}
                            {step === 5 && <GuardianInfo onNext={handleNext} />}
                            {step === 6 && <AcademicInfo onNext={handleNext} />}
                            {step === 7 && <MedicalInfo onNext={handleNext} />}

                            <div className='2xl:mt-10 xl:mt-6 flex justify-between'>
                                <button
                                    onClick={() => setStep(step < 2 ? step : step - 1)}
                                    className={`${
                                        step >= 8
                                            ? "pointer-events-none opacity-50"
                                            : ""
                                    } rounded px-2 py-1 text-slate-400 hover:text-slate-700`}
                                >
                                    Back
                                </button>
                                <button
                                    onClick={() => {
                                        // Manually trigger the form submission of the current step
                                        document.querySelector("form")?.dispatchEvent(
                                            new Event("submit", {
                                                cancelable: true,
                                                bubbles: true,
                                            })
                                        );
                                    }}
                                    className={`${
                                        step >= 8
                                            ? "pointer-events-none opacity-50"
                                            : ""
                                    } flex items-center justify-center rounded-full bg-blue-500 py-1.5 px-3.5 font-medium tracking-tight text-white hover:bg-blue-600 active:bg-blue-700`}
                                >
                                    {step === 7
                                        ? "Finish"
                                        : step === 8
                                        ? "Finish"
                                        : "Next"}
                                </button>
                            </div>
                        </>
                    )}
                </div>
            </div>
        </div>
    );
}

function Stepper({ step }: StepperProps) {
    const steps = [
        { number: 1, description: "Basic Info", icon: Info },
        { number: 2, description: "Address Info", icon: LocateFixed },
        { number: 3, description: "Father’s Info", icon: CircleUser },
        { number: 4, description: "Mother’s Info", icon: CircleUserRoundIcon },
        { number: 5, description: "Guardian’s Info", icon: Shield },
        { number: 6, description: "Academic Info", icon: GraduationCap },
        { number: 7, description: "Medical Info", icon: ClipboardPlus },
    ];

    return (
        <div className='flex w-full items-center flex-wrap 2xl:gap-y-10 2xl:gap-x-4  xl:gap-y-5 xl:gap-x-4 '>
            {steps.map((s, index) => (
                <div
                    key={s.number}
                    className='flex items-center'
                >
                    <Step
                        step={s.number}
                        currentStep={step}
                        description={s.description}
                        icon={s.icon}
                    />
                    {index < steps.length - 1 && (
                        <motion.div
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            transition={{ delay: 0.2 }}
                            className=' text-slate-400 ml-2'
                        >
                            <ChevronRight
                                color={
                                    step > s.number
                                        ? "var(--blue-500)"
                                        : "var(--slate-400)"
                                }
                            />
                        </motion.div>
                    )}
                </div>
            ))}
        </div>
    );
}

function Step({ step, currentStep, description, icon: Icon }: StepProps) {
    let status =
        currentStep === step
            ? "active"
            : currentStep < step
            ? "inactive"
            : "complete";

    return (
        <motion.div
            animate={status}
            className='flex items-center space-x-2'
        >
            <motion.div
                variants={{
                    active: {
                        scale: 1,
                        transition: {
                            delay: 0,
                            duration: 0.2,
                        },
                    },
                    complete: {
                        scale: 1.25,
                    },
                }}
                transition={{
                    duration: 0.6,
                    delay: 0.2,
                    type: "tween",
                    ease: "circOut",
                }}
                className='relative'
            >
                <div className='absolute inset-0 rounded-full bg-blue-200'></div>
                <motion.div
                    initial={false}
                    variants={{
                        inactive: {
                            backgroundColor: "var(--white)",
                            borderColor: "var(--slate-200)",
                            color: "var(--slate-400)",
                        },
                        active: {
                            backgroundColor: "var(--white)",
                            borderColor: "var(--blue-500)",
                            color: "var(--blue-500)",
                        },
                        complete: {
                            backgroundColor: "var(--blue-500)",
                            borderColor: "var(--blue-500)",
                            color: "var(--blue-500)",
                        },
                    }}
                    transition={{ duration: 0.2 }}
                    className={`relative flex h-6 w-6 items-center justify-center rounded-full border-1 font-semibold`}
                >
                    <div className='flex items-center justify-center'>
                        {status === "complete" ? (
                            <CheckIcon className='h-3.5 w-3.5 text-white' />
                        ) : (
                            <Icon />
                        )}
                    </div>
                </motion.div>
            </motion.div>

            <motion.div
                variants={{
                    complete: {
                        color: "var(--blue-500)",
                    },
                }}
                className={`ml-2 text-sm font-medium complete`}
            >
                {description}
            </motion.div>
        </motion.div>
    );
}

function CheckIcon({ className }: IconProps) {
    return (
        <svg
            className={className}
            fill='none'
            viewBox='0 0 24 24'
            stroke='currentColor'
            strokeWidth={3}
        >
            <motion.path
                initial={{ pathLength: 0 }}
                animate={{ pathLength: 1 }}
                transition={{
                    delay: 0.2,
                    type: "tween",
                    ease: "easeOut",
                    duration: 0.3,
                }}
                strokeLinecap='round'
                strokeLinejoin='round'
                d='M5 13l4 4L19 7'
            />
        </svg>
    );
}



My signup code - Aryaman

"use client";
import React, { useState, useEffect, useRef } from "react";
import OTPComponent from "../components/Otp";
import ProfileCreation from "../components/createProfile";
import Image from "next/image";
import { useRouter } from "next/navigation";
import axios from "axios";
import { motion } from "framer-motion";

axios.defaults.baseURL = "http://16.170.155.154:3300/api";

const AuthPage: React.FC = () => {
  const [input, setInput] = useState("");
  const [password, setPassword] = useState("");
  const [isClient, setIsClient] = useState(false);
  const [isButtonDisabled, setIsButtonDisabled] = useState(true);
  const [showOTP, setShowOTP] = useState(false);
  const [showProfileCreation, setShowProfileCreation] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [hasAccount, setHasAccount] = useState(false);
  const [showPasswordInput, setShowPasswordInput] = useState(false);
  const [isFocused, setIsFocused] = useState(false);
  const [value, setValue] = useState('');
  const [isPasswordFocused, setIsPasswordFocused] = useState(false);
  const [isSendingOTP, setIsSendingOTP] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);
  const passwordRef = useRef<HTMLInputElement>(null);
  const router = useRouter();

  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  const phoneRegex = /^\d{10}$/;

  const validateInput = (input: string): boolean => {
    return emailRegex.test(input) || phoneRegex.test(input);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateInput(input.trim())) {
      setErrorMessage("Invalid email or mobile number.");
      return;
    }
    setErrorMessage("");
    setIsSendingOTP(true);

    const userObj =
      emailRegex.test(input) || phoneRegex.test(input)
        ? { email: input }
        : { phone: input };

    try {
      const { data } = await axios.post("/users/exists", userObj);

      console.log("Server response:", data); // Debugging log

      if (data.exists) {
        console.log("User exists, showing password input.");
        setHasAccount(true);
        setShowPasswordInput(true);
        setIsButtonDisabled(password.trim() === "");
        if (inputRef.current) {
          inputRef.current.blur();
        }
      } else {
        console.log("User does not exist, showing OTP input.");
        setHasAccount(false);
        setShowOTP(true);
      }
    } catch (error) {
      console.error("Error checking user existence:", error);
      setErrorMessage("Error checking user existence.");
    } finally {
      setIsSendingOTP(false);
    }
  };

  const handlePasswordSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (password.trim() === "") {
      setErrorMessage("Password cannot be empty.");
      return;
    }
    setErrorMessage("");

    try {
      const { data } = await axios.post("/users/login", {
        ...(emailRegex.test(input) ? { email: input } : { phone: input }),
        password,
      });

      // Assuming successful login, you might want to store token or user info in state/context
      console.log("Login successful:", data);

      // Navigate to the loader or dashboard upon successful login
      router.push("/loader");
    } catch (error) {
      console.error("Error logging in:", error);
      setErrorMessage("Error logging in. Please try again.");
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInput(e.target.value);
  };

  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setPassword(e.target.value);
  };

  const handleEdit = () => {
    setShowOTP(false);
  };

  const handleOTPSubmit = () => {
    setShowProfileCreation(true);
  };

  useEffect(() => {
    setIsClient(true);
  }, []);

  useEffect(() => {
    if (showPasswordInput) {
      setIsButtonDisabled(password.trim() === "" || isSendingOTP);
    } else {
      setIsButtonDisabled(input.trim() === "" || isSendingOTP);
    }
  }, [input, password, showPasswordInput, isSendingOTP]);

  return (
    <div className="relative flex-1 flex items-center justify-center h-screen overflow-hidden">
      <motion.div
        className="absolute inset-0"
        style={{
          backgroundImage: 'url("/NewAppBG2.png")',
          backgroundPosition: "0% 0%",
        }}
        animate={{ backgroundPosition: ["0% 0%", "100% 0%"] }}
        transition={{
          duration: 30,
          ease: "linear",
          repeat: Infinity,
          repeatType: "loop",
        }}
      ></motion.div>

      <motion.div
        className="absolute border-8 border-white -top-20 -left-20 w-96 h-96 bg-blue-500 rounded-full opacity-100"
        animate={{
          scale: [1, 1, 1.5, 1, 1],
          rotate: [0, 270, 270, 270, 0],
          borderRadius: ["40%", "45%", "50%", "45%", "40%"],
        }}
        transition={{ duration: 5, repeat: Infinity, ease: "linear" }}
      ></motion.div>
      <motion.div
        className="absolute border-8 border-white -bottom-20 -right-20 w-96 h-96 bg-blue-500 rounded-full opacity-100"
        animate={{
          scale: [1, 1, 1.5, 1, 1],
          rotate: [0, 270, 270, 270, 0],
          borderRadius: ["40%", "45%", "50%", "45%", "40%"],
        }}
        transition={{ duration: 5, repeat: Infinity, ease: "linear" }}
      ></motion.div>

      {showProfileCreation ? (
        <ProfileCreation input={input} />
      ) : showOTP ? (
        <OTPComponent
          input={input}
          onEdit={handleEdit}
          onSubmitOTP={handleOTPSubmit}
        />
      ) : (
        <motion.div
          className="bg-white border p-8 shadow-xl w-auto h-auto rounded-lg z-10"
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.5 }}
        >
          <Image
            src="/dummyIcon.png"
            alt="companyImage"
            width={200}
            height={200}
            className="ml-24"
            priority
          />
          <div className="flex flex-col items-center">
            <form
              onSubmit={showPasswordInput ? handlePasswordSubmit : handleSubmit}
              className="w-full flex flex-col items-center"
            >
              <div className="relative w-96 mb-4 mt-6">
                <div
                  className={`absolute left-5 top-4 text-gray-400 font-medium transition-all duration-200 ease-in-out pointer-events-none ${
                    isFocused || value ? "text-xs -top-3 mt-5" : ""
                  }`}
                >
                  Email Address or Phone Number
                </div>
                <input
                  type="text"
                  id="input"
                  className="w-full p-2 pt-6 pl-5 font-medium focus:border-2 border-2 rounded-xl border-gray-400 mb-2 focus:border-blue-600 outline-none"
                  value={value}
                  onChange={handleInputChange}
                  onFocus={() => setIsFocused(true)}
                  onBlur={() => setIsFocused(false)}
                  ref={inputRef}
                />
                {errorMessage && (
                  <p className="text-red-500 text-xs ml-2">{errorMessage}</p>
                )}
              </div>
              {showPasswordInput && (
                <div className="relative w-96 mb-4">
                  <div
                    className={`absolute left-5 top-4 text-gray-400 font-medium transition-all duration-200 ease-in-out pointer-events-none ${
                      isPasswordFocused || password ? "text-xs -top-3 mt-5" : ""
                    }`}
                  >
                    Password
                  </div>
                  <input
                    type="password"
                    className="w-full p-2 pt-6 pl-5 font-medium focus:border-2 border-2 rounded-xl border-gray-400 mb-2 focus:border-blue-600 outline-none"
                    value={password}
                    onChange={handlePasswordChange}
                    onFocus={() => setIsPasswordFocused(true)}
                    onBlur={() => !password && setIsPasswordFocused(false)}
                    ref={passwordRef}
                  />
                  {errorMessage && (
                    <p className="text-red-500 text-xs ml-2">{errorMessage}</p>
                  )}
                </div>
              )}
              <button
                type="submit"
                className={`w-96 py-2 border-2 font-semibold border-blue-500 rounded-xl mb-8 ${
                  isButtonDisabled || isSendingOTP
                    ? "text-blue-500 cursor-not-allowed"
                    : "bg-blue-500 text-white hover:bg-blue-600"
                }`}
                disabled={isButtonDisabled || isSendingOTP}
              >
                {isSendingOTP && !showPasswordInput ? "Sending OTP..." : "Next"}
              </button>
            </form>
          </div>
        </motion.div>
      )}
    </div>
  );
};

export default AuthPage;
