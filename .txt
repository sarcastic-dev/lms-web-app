"use client";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { EllipsisVertical, GraduationCap, Plus, Search } from "lucide-react";
import React, { useState } from "react";
import {
    Dialog,
    DialogContent,
    DialogDescription,
    DialogFooter,
    DialogHeader,
    DialogTitle,
    DialogTrigger,
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import {
    Select,
    SelectTrigger,
    SelectContent,
    SelectItem,
    SelectGroup,
    SelectValue,
    SelectLabel,
} from "@/components/ui/select";
import { Teachers, educationStages } from "@/Constant";

import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuGroup,
    DropdownMenuItem,
    DropdownMenuLabel,
    DropdownMenuSeparator,
    DropdownMenuShortcut,
    DropdownMenuSub,
    DropdownMenuSubContent,
    DropdownMenuSubTrigger,
    DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

const Page = () => {
    const [open, setOpen] = useState(false);
    return (
        <div className='m-5'>
            <h2 className='text-3xl text-gray-800 font-semibold'>
                Classroom Setup
            </h2>
            <div className='flex flex-wrap justify-between items-center bg-gray-100 p-8 rounded-lg mt-10'>
                <div className='relative w-72 flex items-center'>
                    <Input
                        placeholder='Search For Classroom'
                        className='pl-9'
                    />
                    <Search
                        className='absolute left-3 top-2.5 text-gray-400 placeholder:text-gray-500'
                        size='20'
                    />
                </div>

                <div className='flex items-center'>
                    <Dialog>
                        <DialogTrigger asChild>
                            <Button
                                variant={"outline"}
                            >
                                <span><Plus size={18} className="mr-1"/></span>Create Classroom
                            </Button>
                        </DialogTrigger>
                        <DialogContent className='sm:max-w-4xl'>
                            <DialogHeader>
                                <DialogTitle>Classroom</DialogTitle>
                                <DialogDescription>
                                    Create a classroom, you can add teacher &
                                    student in further process.
                                </DialogDescription>
                            </DialogHeader>
                            <div className='grid gap-4 py-4 justify-items-start'>
                                <div className='grid grid-cols-4 items-center gap-4 '>
                                    <Label
                                        htmlFor='name'
                                        className='text-right'
                                    >
                                        Name
                                    </Label>
                                    <Select>
                                        <SelectTrigger className='col-span-3 p-2 px-3 rounded-md border focus:outline-none'>
                                            <SelectValue placeholder='Select class' />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {educationStages.map((stage) => (
                                                <SelectGroup key={stage.stage}>
                                                    <SelectLabel className='bg-gray-50 rounded-sm'>
                                                        {stage.stage}
                                                    </SelectLabel>
                                                    {stage.classes.map(
                                                        (className) => (
                                                            <SelectItem
                                                                key={className}
                                                                value={
                                                                    className
                                                                }
                                                            >
                                                                {className}
                                                            </SelectItem>
                                                        )
                                                    )}
                                                </SelectGroup>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                </div>
                                <div className='grid grid-cols-4 items-center gap-4'>
                                    <Label
                                        htmlFor='teacher'
                                        className='text-right'
                                    >
                                        Teacher
                                    </Label>
                                    <Select>
                                        <SelectTrigger className='col-span-3 p-2 px-3 rounded-md border focus:outline-none'>
                                            <SelectValue placeholder='Select teacher' />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {Teachers.map((teacher) => (
                                                <SelectItem
                                                    key={teacher.id}
                                                    value={teacher.name}
                                                >
                                                    {teacher.name}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                </div>
                            </div>
                            <DialogFooter>
                                <Button type='submit'>Create</Button>
                            </DialogFooter>
                        </DialogContent>
                    </Dialog>
                </div>
            </div>
            <div className='w-full bg-gray-100 h-40 mt-6 rounded-md flex flex-col justify-evenly'>
                <div className='flex flex-wrap justify-between items-center pl-5'>
                    <div>
                        <h2 className='font-semibold text-lg text-blue-600'>
                            ClassRoom No.1
                        </h2>
                    </div>
                    <div>
                        <DropdownMenu
                            open={open}
                            onOpenChange={setOpen}
                        >
                            <DropdownMenuTrigger asChild>
                                <Button variant='ghost'>
                                    <EllipsisVertical size={20} />
                                </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent
                                align='end'
                                className='w-[200px] font-semibold'
                            >
                                <DropdownMenuGroup>
                                    <DropdownMenuItem>
                                        Edit Classroom Name
                                    </DropdownMenuItem>
                                    <DropdownMenuSeparator />
                                    <DropdownMenuItem>
                                        Add Student
                                    </DropdownMenuItem>
                                    <DropdownMenuSeparator />
                                    <DropdownMenuItem>
                                        Add Teacher
                                    </DropdownMenuItem>
                                    <DropdownMenuSeparator />
                                    <DropdownMenuItem>
                                        Add Co-Teacher
                                    </DropdownMenuItem>
                                    <DropdownMenuSeparator />
                                    <DropdownMenuItem className='text-red-600'>
                                        Delete Classroom
                                    </DropdownMenuItem>
                                </DropdownMenuGroup>
                            </DropdownMenuContent>
                        </DropdownMenu>
                    </div>
                </div>
                <div className='bg-white w-64 ml-4 px-3 py-2 rounded-md text-sm font-medium'>
                    12th (Senior Secondary)
                </div>

                <div className='flex justify-between items-center'>
                    <div className='w-1/3 flex justify-around'>
                        <div>
                            <Dialog>
                                <DialogTrigger asChild>
                                    <Button variant='ghost' className="text-blue-500">
                                        Add Teacher
                                    </Button>
                                </DialogTrigger>
                                <DialogContent className='sm:max-w-[425px]'>
                                    <DialogHeader>
                                        <DialogTitle>Edit profile</DialogTitle>
                                        <DialogDescription>
                                            Make changes to your profile here.
                                            Click save when you&apos;re done.
                                        </DialogDescription>
                                    </DialogHeader>
                                    <div className='grid gap-4 py-4'>
                                        <div className='grid grid-cols-4 items-center gap-4'>
                                            <Label
                                                htmlFor='name'
                                                className='text-right'
                                            >
                                                Name
                                            </Label>
                                            <Input
                                                id='name'
                                                value='Pedro Duarte'
                                                className='col-span-3'
                                            />
                                        </div>
                                        <div className='grid grid-cols-4 items-center gap-4'>
                                            <Label
                                                htmlFor='username'
                                                className='text-right'
                                            >
                                                Username
                                            </Label>
                                            <Input
                                                id='username'
                                                value='@peduarte'
                                                className='col-span-3'
                                            />
                                        </div>
                                    </div>
                                    <DialogFooter>
                                        <Button type='submit'>
                                            Save changes
                                        </Button>
                                    </DialogFooter>
                                </DialogContent>
                            </Dialog>
                        </div>
                        <div>
                            <Dialog>
                                <DialogTrigger asChild>
                                    <Button variant='ghost' className="text-blue-500">
                                        Add Co-Teacher
                                    </Button>
                                </DialogTrigger>
                                <DialogContent className='sm:max-w-[425px]'>
                                    <DialogHeader>
                                        <DialogTitle>Edit profile</DialogTitle>
                                        <DialogDescription>
                                            Make changes to your profile here.
                                            Click save when you&apos;re done.
                                        </DialogDescription>
                                    </DialogHeader>
                                    <div className='grid gap-4 py-4'>
                                        <div className='grid grid-cols-4 items-center gap-4'>
                                            <Label
                                                htmlFor='name'
                                                className='text-right'
                                            >
                                                Name
                                            </Label>
                                            <Input
                                                id='name'
                                                value='Pedro Duarte'
                                                className='col-span-3'
                                            />
                                        </div>
                                        <div className='grid grid-cols-4 items-center gap-4'>
                                            <Label
                                                htmlFor='username'
                                                className='text-right'
                                            >
                                                Username
                                            </Label>
                                            <Input
                                                id='username'
                                                value='@peduarte'
                                                className='col-span-3'
                                            />
                                        </div>
                                    </div>
                                    <DialogFooter>
                                        <Button type='submit'>
                                            Save changes
                                        </Button>
                                    </DialogFooter>
                                </DialogContent>
                            </Dialog>
                        </div>
                        <p className="flex items-center"><GraduationCap color="#ef4444" size={20}/> <span className="text-red-500 pl-2 text-sm">25 Students</span></p>
                    </div>
                    <div className="px-4">
                        <Button variant='link'>View Classroom</Button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Page;




import React, { useState } from "react";
import { Input } from "./ui/input";
import { Switch } from "antd";
import { classStages } from "@/Constant";

const EditStructure = () => {
	const [classStageNames, setClassStageNames] = useState<{
		[key: string]: string;
	}>({});
	const [isEdited, setIsEdited] = useState<{ [key: string]: boolean }>({});

	const handleInputChange = (index: number, value: string) => {
		setClassStageNames((prevState) => ({
			...prevState,
			[index]: value,
		}));

		setIsEdited((prevState) => ({
			...prevState,
			[index]: true,
		}));
	};

	return (
		<div className="">
			<h3>
				Add or remove classes from your institute or edit the class name
			</h3>
			<div className="overflow-y-scroll">
				{classStages.map((item, index) => (
					<div key={index}>
						<Input
							className='w-50 border-0 outline-none'
							value={
								classStageNames[index] !== undefined
									? classStageNames[index]
									: item.stage
							}
							onChange={(e) =>
								handleInputChange(index, e.target.value)
							}
						/>
						{item.classes.map((item, index) => (
							<div
								className='flex items-center justify-between px-14 space-x-14 mt-4'
								key={index}
							>
								<Input
									placeholder={item}
									className='placeholder:text-gray'
								/>
								<Switch />
							</div>
						))}
					</div>
				))}
			</div>
		</div>
	);
};

export default EditStructure;

/////////////////////////////////////////////////







"use client";
import React, { useState, useEffect } from 'react';
import CreateInstitute from './CreateInstitute';
import axiosInstance from '@/lib/axiosInstance';
import { Input } from './ui/input';

type Field = 'name' | 'email' | 'phone' | 'password';

interface ProfileCreationProps {
  input: string;
}

interface User {
  id: string;
  name: string;
  email: string;
  phone: string;
}

const CreateProfile: React.FC<ProfileCreationProps> = ({ input }) => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [password, setPassword] = useState('');
  const [errors, setErrors] = useState<{ name?: string; email?: string; phoneNumber?: string; password?: string }>({});
  const [showInstituteCreation, setShowInstituteCreation] = useState(false);
  const [userId, setUserId] = useState<string | null>(null);
  const [isFocused, setIsFocused] = useState({
    name: false,
    email: false,
    phone: false,
    password: false,
  });
  const [isButtonDisabled, setIsButtonDisabled] = useState(false);
  const [isCreating, setIsCreating] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [selectedUser, setSelectedUser] = useState<User | null>(null);

  const isEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(input);

  useEffect(() => {
    if (name.trim() && password.trim() && (isEmail ? email.trim() : phoneNumber.trim())) {
      setIsButtonDisabled(true);
    } else {
      setIsButtonDisabled(false);
    }
  }, [name, email, phoneNumber, password, isEmail]);

  const handleFocus = (field: Field) => {
    setIsFocused((prev) => ({ ...prev, [field]: true }));
  };

  const handleBlur = (field: Field, value: string) => {
    if (value.trim() === '') {
      setIsFocused((prev) => ({ ...prev, [field]: false }));
    }
  };

  const validateForm = () => {
    const newErrors: { name?: string; email?: string; phoneNumber?: string; password?: string } = {};

    if (!name.trim()) {
      newErrors.name = 'Name is required.';
    }

    if (!password.trim()) {
      newErrors.password = 'Password is required.';
    } else if (password.length < 6) {
      newErrors.password = 'Password must be at least 6 characters long.';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const parseName = (name: string) => {
    const nameParts = name.trim().split(' ');
    const parsedName: { firstName: string; middleName?: string; lastName?: string } = { firstName: nameParts[0] };

    if (nameParts.length === 2) {
      parsedName.lastName = nameParts[1];
    } else if (nameParts.length >= 3) {
      parsedName.middleName = nameParts.slice(1, -1).join(' ');
      parsedName.lastName = nameParts[nameParts.length - 1];
    }

    return parsedName;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (validateForm()) {
      setIsCreating(true);
      const parsedName = parseName(name);
      try {
        const response = await axiosInstance.post('/users', {
          ...parsedName,
          email: isEmail ? input : email,
          phone: isEmail ? phoneNumber : input,
          password,
          role: "admin"
        });
        console.log('Form submitted:', response.data);
        setUserId(response.data.id); // Store the user_id

        setTimeout(() => {
          setIsCreating(false);
          setShowInstituteCreation(true);
        }, 2000);
      } catch (error) {
        console.error('Error creating user:', error);
        setErrorMessage('Error creating user. Please try again.');
        setIsCreating(false);
      }
    }
  };

  const handleUserSelect = async (userId: string) => {
    try {
      const response = await axiosInstance.get<User>(`/users/${userId}`);
      setSelectedUser(response.data);
    } catch (error) {
      console.error('Error fetching user:', error);
    }
  };

  if (showInstituteCreation && userId) {
    return <CreateInstitute userId={userId} />;
  }

  return (
    <div className="bg-white border p-8 rounded-lg shadow-xl w-2/6 h-5/6 z-10">
      <h1 className="text-2xl text-center text-blue-500 font-bold mb-3">Account Details</h1>
      <p className="text-center text-gray-500 mb-6">Please enter your details</p>
      <form onSubmit={handleSubmit}>
        <div className="p-8">
          <div className="relative mb-4">
            <div className={`absolute left-4 transition-all duration-200 ease-in-out pointer-events-none ${isFocused.name || name ? 'text-xs -top-1 mt-3' : 'top-4 text-gray-400 font-medium'}`}>
              Name<span className="text-red-500"> *</span>
            </div>
            <Input
              type="text"
              className={`w-full font-medium pl-4 mb-4 border-2 border-gray-400 rounded-xl bg-white focus:border-blue-600 focus:border-2 outline-none ${errors.name ? 'border-red-500' : 'border-gray-300'} py-2`}
              value={name}
              onChange={(e) => setName(e.target.value)}
              onFocus={() => handleFocus('name')}
              onBlur={() => handleBlur('name', name)}
              required
            />
            {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}
          </div>

          {isEmail ? (
            <>
              <div className="relative mb-4">
                <div className={`absolute left-4 transition-all duration-200 ease-in-out pointer-events-none ${isFocused.email || email ? 'text-xs -top-1 mt-3' : '-top-1 text-xs mt-3 text-gray-400 font-medium'}`}>
                  Email
                </div>
                <Input
                  type="email"
                  className="w-full font-medium p-2 pl-4 mb-4 border-2 border-gray-400 rounded-xl bg-white focus:border-blue-600 focus:border-2 outline-none py-2"
                  value={input}
                  disabled
                />
              </div>
              <div className="relative mb-4">
                <div className={`absolute left-4 transition-all duration-200 ease-in-out pointer-events-none ${isFocused.phone || phoneNumber ? 'text-xs -top-1 mt-3' : 'top-4 text-gray-400 font-medium'}`}>
                  Phone Number
                </div>
                <Input
                  type="tel"
                  className="w-full font-medium p-2 pl-4 mb-4 border-2 border-gray-400 rounded-xl bg-white focus:border-blue-600 focus:border-2 outline-none py-2"
                  value={phoneNumber}
                  onChange={(e) => setPhoneNumber(e.target.value)}
                  onFocus={() => handleFocus('phone')}
                  onBlur={() => handleBlur('phone', phoneNumber)}
                />
              </div>
            </>
          ) : (
            <>
              <div className="relative mb-4">
                <div className={`absolute left-4 transition-all duration-200 ease-in-out pointer-events-none ${isFocused.phone || phoneNumber ? 'text-xs -top-1 mt-3' : '-top-1 text-xs mt-3 text-gray-400 font-medium'}`}>
                  Phone Number
                </div>
                <Input
                  type="tel"
                  className="w-full font-medium p-2 pl-4 mb-4 border-2 border-gray-400 rounded-xl bg-white focus:border-blue-600 focus:border-2 outline-none py-2"
                  value={input}
                  disabled
                />
              </div>
              <div className="relative mb-4">
                <div className={`absolute left-4 transition-all duration-200 ease-in-out pointer-events-none ${isFocused.email || email ? 'text-xs -top-1 mt-3' : 'top-4 text-gray-400 font-medium'}`}>
                  Email
                </div>
                <Input
                  type="email"
                  className="w-full font-medium p-2 pl-4 mb-4 border-2 border-gray-400 rounded-xl bg-white focus:border-blue-600 focus:border-2 outline-none py-2"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  onFocus={() => handleFocus('email')}
                  onBlur={() => handleBlur('email', email)}
                />
              </div>
            </>
          )}

          <div className="relative mb-4">
            <div className={`absolute left-4 transition-all duration-200 ease-in-out pointer-events-none ${isFocused.password || password ? 'text-xs -top-1 mt-3' : 'top-4 text-gray-400 font-medium'}`}>
              Password<span className="text-red-500"> *</span>
            </div>
            <Input
              type="password"
              className={`w-full font-medium pl-4 mb-4 border-2 border-gray-400 rounded-xl bg-white focus:border-blue-600 focus:border-2 outline-none ${errors.password ? 'border-red-500' : 'border-gray-300'} py-2`}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              onFocus={() => handleFocus('password')}
              onBlur={() => handleBlur('password', password)}
              required
            />
            {errors.password && <p className="text-red-500 text-sm mt-1">{errors.password}</p>}
          </div>

          <div className="text-center mt-6">
            <button
              type="submit"
              className={`w-full p-2 bg-blue-500 text-white rounded-lg font-semibold ${isButtonDisabled ? '' : 'cursor-not-allowed opacity-50'}`}
              disabled={!isButtonDisabled}
            >
              {isCreating ? 'Creating...' : 'Create Account'}
            </button>
          </div>

          {errorMessage && <p className="text-red-500 text-center mt-4">{errorMessage}</p>}
        </div>
      </form>
    </div>
  );
};

export default CreateProfile;
